/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package testgroup.recursionui;

import java.awt.Color;
import java.util.HashMap;
import javax.swing.BorderFactory;

/**
 *
 * @author definitelyrus
 */
public class RecursionGUI extends javax.swing.JPanel {

    /**
     * Creates new form RecursionGUI
     */
    public RecursionGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inputNField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        inputRField = new javax.swing.JTextField();
        outputField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        choiceBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputLogField = new javax.swing.JTextArea();
        startButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));
        setFocusable(false);
        setMaximumSize(new java.awt.Dimension(750, 328));
        setMinimumSize(new java.awt.Dimension(750, 328));

        mainPanel.setBackground(new java.awt.Color(51, 51, 51));
        mainPanel.setFocusable(false);
        mainPanel.setMaximumSize(new java.awt.Dimension(738, 326));
        mainPanel.setMinimumSize(new java.awt.Dimension(738, 326));
        mainPanel.setName(""); // NOI18N

        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("n Value");
        jLabel1.setFocusable(false);

        inputNField.setBackground(new java.awt.Color(51, 51, 51));
        inputNField.setForeground(new java.awt.Color(204, 204, 204));
        inputNField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        inputNField.setCaretColor(new java.awt.Color(255, 255, 255));
        inputNField.setDisabledTextColor(new java.awt.Color(51, 51, 51));

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("r Value");
        jLabel2.setFocusable(false);

        inputRField.setEditable(false);
        inputRField.setBackground(new java.awt.Color(51, 51, 51));
        inputRField.setForeground(new java.awt.Color(204, 204, 204));
        inputRField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(63, 63, 63)));
        inputRField.setCaretColor(new java.awt.Color(255, 255, 255));
        inputRField.setDisabledTextColor(new java.awt.Color(51, 51, 51));

        outputField.setEditable(false);
        outputField.setBackground(new java.awt.Color(51, 51, 51));
        outputField.setForeground(new java.awt.Color(204, 204, 204));
        outputField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(63, 63, 63)));
        outputField.setCaretColor(new java.awt.Color(255, 255, 255));
        outputField.setDisabledTextColor(new java.awt.Color(63, 63, 63));

        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Result");
        jLabel3.setFocusable(false);

        choiceBox.setBackground(new java.awt.Color(51, 51, 51));
        choiceBox.setForeground(new java.awt.Color(255, 255, 255));
        choiceBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fibonacci Series", "nPr", "nCr" }));
        choiceBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        choiceBox.setMinimumSize(new java.awt.Dimension(220, 23));
        choiceBox.setPreferredSize(new java.awt.Dimension(220, 23));
        choiceBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceBoxActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Formula");
        jLabel4.setFocusable(false);

        jScrollPane1.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Output Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Liberation Sans", 0, 13), new java.awt.Color(204, 204, 204))); // NOI18N
        jScrollPane1.setMaximumSize(new java.awt.Dimension(506, 285));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(506, 285));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(506, 285));

        outputLogField.setEditable(false);
        outputLogField.setBackground(new java.awt.Color(0, 0, 0));
        outputLogField.setColumns(82);
        outputLogField.setFont(new java.awt.Font("Ubuntu Mono", 0, 13)); // NOI18N
        outputLogField.setForeground(new java.awt.Color(0, 255, 255));
        outputLogField.setLineWrap(true);
        outputLogField.setRows(22);
        outputLogField.setTabSize(2);
        outputLogField.setWrapStyleWord(true);
        outputLogField.setBorder(null);
        outputLogField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        outputLogField.setMaximumSize(new java.awt.Dimension(506, 275));
        outputLogField.setMinimumSize(new java.awt.Dimension(506, 275));
        jScrollPane1.setViewportView(outputLogField);

        startButton.setBackground(new java.awt.Color(51, 51, 51));
        startButton.setFont(startButton.getFont().deriveFont(startButton.getFont().getStyle() | java.awt.Font.BOLD, startButton.getFont().getSize()+37));
        startButton.setForeground(new java.awt.Color(51, 255, 255));
        startButton.setText("Run");
        startButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        startButton.setFocusPainted(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        progressBar.setBackground(new java.awt.Color(102, 102, 102));
        progressBar.setForeground(new java.awt.Color(51, 255, 255));
        progressBar.setBorder(null);
        progressBar.setBorderPainted(false);
        progressBar.setFocusable(false);

        statusLabel.setFont(statusLabel.getFont().deriveFont((statusLabel.getFont().getStyle() & ~java.awt.Font.ITALIC) & ~java.awt.Font.BOLD, statusLabel.getFont().getSize()-3));
        statusLabel.setForeground(new java.awt.Color(204, 204, 204));
        statusLabel.setFocusable(false);
        statusLabel.setMaximumSize(new java.awt.Dimension(726, 23));
        statusLabel.setMinimumSize(new java.awt.Dimension(726, 23));
        statusLabel.setPreferredSize(new java.awt.Dimension(726, 23));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(inputRField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(inputNField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(choiceBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(173, 173, 173)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputRField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(40, 40, 40)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choiceBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void choiceBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceBoxActionPerformed
        String choice = (String) choiceBox.getSelectedItem();
        String statusText = "";
        //Updates the UI
        switch (choice) {
            case "nPr":
                statusText = "Gets the number of ways to choose and arrange \"r\" objects from a group of \"n\" objects, where order matters.";
                formula = "npr";
                inputRField.setEditable(true);
                inputRField.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
                break;
            case "nCr":
                statusText = "Gets the number of ways to choose and group \"r\" objects from a group of \"n\" objects, where order doesn't matter.";
                formula = "ncr";
                inputRField.setEditable(true);
                inputRField.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
                break;
            case "Fibonacci Series":
                statusText = "The sequence of numbers which each number is the sum of the two preceeding ones, starting from 0 and 1.";
                formula = "fib";
                inputRField.setEditable(false);
                inputRField.setText("");
                inputRField.setBorder(BorderFactory.createLineBorder(new Color(63, 63, 63)));
                break;
        }
        statusLabel.setText(statusText);
        outputField.setText("");
        
    }//GEN-LAST:event_choiceBoxActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        //Calls calculate() in a separate calculatorThread to avoid UI slowdown.
        calculatorThread = new Thread(() -> { calculate(); });
        calculatorThread.start();
    }//GEN-LAST:event_startButtonActionPerformed
    
    
    //User-defined functions & values for convenience. -------------------------
    /**
     * Used to store already-calculated values. Saves processing power.
     * Key: n <br>
     * Value: The result of n-1 + n-2 OR x!
     */
    HashMap<Integer, Long> numCache = new HashMap<>();
    
    //Holds the result as a String, converted from Long or Double.
    String result;
    
    //n that the user inputted.
    int baseN = 0;
    
    //The highest n reached in all recursion cycles.
    int highN = 0;
    
    //The formula to use based on the mode selected.
    String formula = "fib";
    
    //All collected log messages into one String for display.
    String outputLog;
    
    //Replacement result text in case there's an error.
    String resultOverride = "";
    
    //A separate thread to use calculate() in. Prevents freezes.
    Thread calculatorThread;
    
    void calculate() {
        int n, r;
        String statusText;
        
        //Tries to parse n into an integer value.
        try { n = Integer.parseInt(inputNField.getText()); }
        catch (NumberFormatException e) {
            statusLabel.setText("Bad input. Cancelling...");
            return;
        }
        
        //Tries to parse r into an integer value.
        try { r = Integer.parseInt(inputRField.getText()); }
        catch (NumberFormatException e) {
            print("[!] r = 0 due to bad or no r input.");
            r = 0;
        }
        
        //Resets values from prior runs.
        result = null;
        numCache.clear();
        outputLog = "";
        resultOverride = "";
        progressBar.setValue(0);
        baseN = n;
        highN = 0;
        progressBar.setMaximum(baseN);
        
        try {
            switch (formula) {
                case "npr":
                    statusLabel.setText("Calculating nPr...");
                    result = Double.toString(permutationFormula(n, r));
                    break;
                case "ncr":
                    statusLabel.setText("Calculating nCr...");
                    result = Double.toString(combinationFormula(n, r));
                    break;
                case "fib":
                    statusLabel.setText("Calculating Fibonacci sequence...");
                    result = Long.toString(fibonacciFormula(n));
                    break;
            }
            statusText = "Done!";
        }
        catch (StackOverflowError e) {
            statusText = "Stack overflow!";
            resultOverride = "STACK OVERFLOW";
        }
        
        //Outputs the override result instead if an exception is caught.
        outputField.setText(resultOverride.equals("") ? result : resultOverride);
        statusLabel.setText(statusText);
    }
    
    double permutationFormula(int n, int r) {
        long f1 = factorial(n);
        long f2 = factorial(n-r);
        double q = f1 / f2;
        
        log(Double.toString(q) + " = " + Long.toString(n) + "! / (" + Long.toString(n) + " - " + Long.toString(r) + ")!");
        log(Double.toString(q) + " = " + Long.toString(f1) + " / " + Long.toString(f2));
        return q;
    }
    
    double combinationFormula(int n, int r) {
        long f1 = factorial(n);
        long f2 = factorial(r);
        long f3 = factorial(n-r);
        long p = f2 * f3;
        long q = f1 / p;
        
        log(Double.toString(q) + " = " + Long.toString(n) + " / (" + Long.toString(r) + "! * (" + Long.toString(n) + " - " +  Long.toString(r) + ")!)");
        log(Double.toString(q) + " = " + Long.toString(f1) + " / (" + Long.toString(f2) + " * " + Long.toString(f3) + ")");
        log(Double.toString(q) + " = " + Long.toString(f1) + " / " + Long.toString(p));
        return q;
    }
    
    long fibonacciFormula(int n) {
        if (resultOverride.equals("INTEGER OVERFLOW")) return 0;
        
        //Floor values
        if (n <= 0) return 0l;
        else if (n == 1) return 1l;
        
        long sum, nMinus1, nMinus2;
        
        //Tries to find the values in the numCache to avoid recalculating.
        try {
            nMinus1 = numCache.get(n-1);
            nMinus2 = numCache.get(n-2);
        }
        
        //If the values don't already exist in numCache, manually calculate.
        catch (NullPointerException e) {
            nMinus1 = fibonacciFormula(n - 1);
            nMinus2 = fibonacciFormula(n - 2);
        }
        
        sum = nMinus1 + nMinus2;
        
        /*
         * Checks if n exceeds the highest n so far.
         *
         * For some reason, this will keep track of the previous
         * highN even after I reset highN to 0.
         * I never found a fix and probably never will.
         */
        if (n > highN){
            highN = n;
            progressBar.setValue(highN);
            
            //Logs the the calculation.
            log("n: " + n + "/" + baseN + " | " + Long.toString(sum)
                    + " = " + Long.toString(nMinus1)// + "(n = " + (n-1) + ")"
                    + " + " + Long.toString(nMinus2)// + "(n = " + (n-2) + ")"
            );
        }
        
        //Detects integer overflows.
        if (sum < 0 || nMinus1 < 0 || nMinus2 < 0) {
            statusLabel.setText("Integer overflow!");
            resultOverride = "INTEGER OVERFLOW";
            log("^-----^----- INTEGER OVERFLOW at n=" + n + " -----^-----^");
            sum = 0;
        }
        
        //Adds the result to the numCache for later use.
        numCache.put(n, sum);
        
        return sum;
    }
    
    long factorial(int factor1) {
        if (factor1 == 1) return factor1;
        
        long factor2;
        
        try { factor2 = numCache.get(factor1-1); }
        catch (NullPointerException e) {
            factor2 = factorial(factor1-1);
            numCache.put(factor1 - 1, factor2);
        }
        
        long product = factor1 * factor2;
        
        if (highN < factor1) {
            highN = factor1;
            progressBar.setValue(factor1);
            //Logs the the calculation.
            log("n: " + factor1 + "/" + baseN + " | " + Long.toString(product)
                    + " = " + Long.toString(factor1)
                    + " * " + Long.toString(factor2)
            );
        }
        
        //Detects integer overflows.
        if (product < 0 || factor1 < 0 || factor2 < 0) {
            statusLabel.setText("Integer overflow!");
            resultOverride = "INTEGER OVERFLOW";
            log("^-----^----- INTEGER OVERFLOW at n=" + factor1 + " -----^-----^");
            product = 0;
        }
        
        return product;
    }
    
    void log(String s) {
        print(s);
        outputLog = outputLog == null ? s : outputLog + "\n\n" + s;
        outputLogField.setText(outputLog);
    }
    
    /**
     * A shortcut to System.out.println()
     * @param s The String you want to print to console.
     */
    void print(String s) { System.out.println(s); }
    
    /**
     * A shortcut to System.out.println(). Accepts integers instead of Strings.
     * @param s The integer you want to print to console.
     */
    void print(int i) { print(Integer.toString(i)); }
    
    /**
     * A shortcut to System.out.println(). Accepts floats instead of Strings.
     * @param f The float you want to print to console.
     */
    void print(float f) { print(Float.toString(f)); }
    
    /**
     * Prints an empty line.
     */
    void print() { print(""); }
    
    //--------------------------------------------------------------------------

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> choiceBox;
    private javax.swing.JTextField inputNField;
    private javax.swing.JTextField inputRField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JPanel mainPanel;
    private javax.swing.JTextField outputField;
    private javax.swing.JTextArea outputLogField;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
